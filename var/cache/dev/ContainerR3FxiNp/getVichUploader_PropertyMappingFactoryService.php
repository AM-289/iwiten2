<?php

namespace ContainerR3FxiNp;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getVichUploader_PropertyMappingFactoryService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'vich_uploader.property_mapping_factory' shared service.
     *
     * @return \Vich\UploaderBundle\Mapping\PropertyMappingFactory
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'vich'.\DIRECTORY_SEPARATOR.'uploader-bundle'.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Mapping'.\DIRECTORY_SEPARATOR.'PropertyMappingFactory.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'vich'.\DIRECTORY_SEPARATOR.'uploader-bundle'.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Mapping'.\DIRECTORY_SEPARATOR.'PropertyMappingResolverInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'vich'.\DIRECTORY_SEPARATOR.'uploader-bundle'.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Mapping'.\DIRECTORY_SEPARATOR.'PropertyMappingResolver.php';

        return $container->privates['vich_uploader.property_mapping_factory'] = new \Vich\UploaderBundle\Mapping\PropertyMappingFactory(($container->privates['vich_uploader.metadata_reader'] ?? self::getVichUploader_MetadataReaderService($container)), new \Vich\UploaderBundle\Mapping\PropertyMappingResolver(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Vich\\UploaderBundle\\Naming\\UniqidNamer'] ??= new \Vich\UploaderBundle\Naming\UniqidNamer());
            yield 1 => ($container->privates['Vich\\UploaderBundle\\Naming\\PropertyNamer'] ?? $container->load('getPropertyNamerService'));
            yield 2 => ($container->privates['Vich\\UploaderBundle\\Naming\\OrignameNamer'] ?? $container->load('getOrignameNamerService'));
            yield 3 => ($container->privates['Vich\\UploaderBundle\\Naming\\HashNamer'] ??= new \Vich\UploaderBundle\Naming\HashNamer());
            yield 4 => ($container->privates['Vich\\UploaderBundle\\Naming\\Base64Namer'] ??= new \Vich\UploaderBundle\Naming\Base64Namer());
            yield 5 => ($container->privates['Vich\\UploaderBundle\\Naming\\SmartUniqueNamer'] ?? $container->load('getSmartUniqueNamerService'));
        }, 6), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Vich\\UploaderBundle\\Naming\\SubdirDirectoryNamer'] ??= new \Vich\UploaderBundle\Naming\SubdirDirectoryNamer());
            yield 1 => ($container->privates['Vich\\UploaderBundle\\Naming\\PropertyDirectoryNamer'] ?? $container->load('getPropertyDirectoryNamerService'));
            yield 2 => ($container->privates['Vich\\UploaderBundle\\Naming\\CurrentDateTimeDirectoryNamer'] ?? $container->load('getCurrentDateTimeDirectoryNamerService'));
            yield 3 => ($container->privates['Vich\\UploaderBundle\\Naming\\ConfigurableDirectoryNamer'] ??= new \Vich\UploaderBundle\Naming\ConfigurableDirectoryNamer());
        }, 4), $container->parameters['vich_uploader.mappings'], '_name'));
    }
}
